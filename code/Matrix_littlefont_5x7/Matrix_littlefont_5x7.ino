#include <Arduino.h>
#include <ShiftRegister74HC595.h>  // https://blog.timodenk.com/shift-register-arduino-library/

// === CONFIGURACIÓN DE PINES ===
#define DATA_PIN 23   // DS
#define CLOCK_PIN 18  // SHCP
#define LATCH_PIN 19  // STCP

#define MATRIX_ROWS 18
#define MATRIX_COLS 96

// Instancia de 3 registros 74HC595 (para 24 columnas)
ShiftRegister74HC595<12> sr(DATA_PIN, CLOCK_PIN, LATCH_PIN);

// Pines de filas (controladas por TIP122)
const uint8_t filas[MATRIX_ROWS] = {
  3, 1, 2, 4, 5,
  12, 13, 14, 15, 16,
  17, 21, 22, 25, 26,
  27, 32, 33
};

// ==============================
// Fuente 5x7 (ASCII 32 a 127)
// Cada carácter es 5 columnas (bits verticales), bit 0 abajo
// ==============================
const uint8_t font5x7[][5] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00 },  // 32 ' '
  { 0x00, 0x00, 0x5F, 0x00, 0x00 },  // 33 '!'
  { 0x00, 0x07, 0x00, 0x07, 0x00 },  // 34 '"'
  { 0x14, 0x7F, 0x14, 0x7F, 0x14 },  // 35 '#'
  { 0x24, 0x2A, 0x7F, 0x2A, 0x12 },  // 36 '$'
  { 0x23, 0x13, 0x08, 0x64, 0x62 },  // 37 '%'
  { 0x36, 0x49, 0x55, 0x22, 0x50 },  // 38 '&'
  { 0x00, 0x05, 0x03, 0x00, 0x00 },  // 39 '''
  { 0x00, 0x1C, 0x22, 0x41, 0x00 },  // 40 '('
  { 0x00, 0x41, 0x22, 0x1C, 0x00 },  // 41 ')'
  { 0x14, 0x08, 0x3E, 0x08, 0x14 },  // 42 '*'
  { 0x08, 0x08, 0x3E, 0x08, 0x08 },  // 43 '+'
  { 0x00, 0x50, 0x30, 0x00, 0x00 },  // 44 ','
  { 0x08, 0x08, 0x08, 0x08, 0x08 },  // 45 '-'
  { 0x00, 0x60, 0x60, 0x00, 0x00 },  // 46 '.'
  { 0x20, 0x10, 0x08, 0x04, 0x02 },  // 47 '/'
  { 0x3E, 0x51, 0x49, 0x45, 0x3E },  // 48 '0'
  { 0x00, 0x42, 0x7F, 0x40, 0x00 },  // 49 '1'
  { 0x42, 0x61, 0x51, 0x49, 0x46 },  // 50 '2'
  { 0x21, 0x41, 0x45, 0x4B, 0x31 },  // 51 '3'
  { 0x18, 0x14, 0x12, 0x7F, 0x10 },  // 52 '4'
  { 0x27, 0x45, 0x45, 0x45, 0x39 },  // 53 '5'
  { 0x3C, 0x4A, 0x49, 0x49, 0x30 },  // 54 '6'
  { 0x01, 0x71, 0x09, 0x05, 0x03 },  // 55 '7'
  { 0x36, 0x49, 0x49, 0x49, 0x36 },  // 56 '8'
  { 0x06, 0x49, 0x49, 0x29, 0x1E },  // 57 '9'
  { 0x00, 0x36, 0x36, 0x00, 0x00 },  // 58 ':'
  { 0x00, 0x56, 0x36, 0x00, 0x00 },  // 59 ';'
  { 0x08, 0x14, 0x22, 0x41, 0x00 },  // 60 '<'
  { 0x14, 0x14, 0x14, 0x14, 0x14 },  // 61 '='
  { 0x00, 0x41, 0x22, 0x14, 0x08 },  // 62 '>'
  { 0x02, 0x01, 0x51, 0x09, 0x06 },  // 63 '?'
  { 0x32, 0x49, 0x79, 0x41, 0x3E },  // 64 '@'
  { 0x7E, 0x11, 0x11, 0x11, 0x7E },  // 65 'A'
  { 0x7F, 0x49, 0x49, 0x49, 0x36 },  // 66 'B'
  { 0x3E, 0x41, 0x41, 0x41, 0x22 },  // 67 'C'
  { 0x7F, 0x41, 0x41, 0x22, 0x1C },  // 68 'D'
  { 0x7F, 0x49, 0x49, 0x49, 0x41 },  // 69 'E'
  { 0x7F, 0x09, 0x09, 0x09, 0x01 },  // 70 'F'
  { 0x3E, 0x41, 0x49, 0x49, 0x7A },  // 71 'G'
  { 0x7F, 0x08, 0x08, 0x08, 0x7F },  // 72 'H'
  { 0x00, 0x41, 0x7F, 0x41, 0x00 },  // 73 'I'
  { 0x20, 0x40, 0x41, 0x3F, 0x01 },  // 74 'J'
  { 0x7F, 0x08, 0x14, 0x22, 0x41 },  // 75 'K'
  { 0x7F, 0x40, 0x40, 0x40, 0x40 },  // 76 'L'
  { 0x7F, 0x02, 0x0C, 0x02, 0x7F },  // 77 'M'
  { 0x7F, 0x04, 0x08, 0x10, 0x7F },  // 78 'N'
  { 0x3E, 0x41, 0x41, 0x41, 0x3E },  // 79 'O'
  { 0x7F, 0x09, 0x09, 0x09, 0x06 },  // 80 'P'
  { 0x3E, 0x41, 0x51, 0x21, 0x5E },  // 81 'Q'
  { 0x7F, 0x09, 0x19, 0x29, 0x46 },  // 82 'R'
  { 0x46, 0x49, 0x49, 0x49, 0x31 },  // 83 'S'
  { 0x01, 0x01, 0x7F, 0x01, 0x01 },  // 84 'T'
  { 0x3F, 0x40, 0x40, 0x40, 0x3F },  // 85 'U'
  { 0x1F, 0x20, 0x40, 0x20, 0x1F },  // 86 'V'
  { 0x3F, 0x40, 0x38, 0x40, 0x3F },  // 87 'W'
  { 0x63, 0x14, 0x08, 0x14, 0x63 },  // 88 'X'
  { 0x07, 0x08, 0x70, 0x08, 0x07 },  // 89 'Y'
  { 0x61, 0x51, 0x49, 0x45, 0x43 },  // 90 'Z'
  { 0x00, 0x7F, 0x41, 0x41, 0x00 },  // 91 '['
  { 0x02, 0x04, 0x08, 0x10, 0x20 },  // 92 '\'
  { 0x00, 0x41, 0x41, 0x7F, 0x00 },  // 93 ']'
  { 0x04, 0x02, 0x01, 0x02, 0x04 },  // 94 '^'
  { 0x40, 0x40, 0x40, 0x40, 0x40 },  // 95 '_'
  { 0x00, 0x01, 0x02, 0x04, 0x00 },  // 96 '`'
  { 0x20, 0x54, 0x54, 0x54, 0x78 },  // 97 'a'
  { 0x7F, 0x48, 0x44, 0x44, 0x38 },  // 98 'b'
  { 0x38, 0x44, 0x44, 0x44, 0x20 },  // 99 'c'
  { 0x38, 0x44, 0x44, 0x48, 0x7F },  // 100 'd'
  { 0x38, 0x54, 0x54, 0x54, 0x18 },  // 101 'e'
  { 0x08, 0x7E, 0x09, 0x01, 0x02 },  // 102 'f'
  { 0x0C, 0x52, 0x52, 0x52, 0x3E },  // 103 'g'
  { 0x7F, 0x08, 0x04, 0x04, 0x78 },  // 104 'h'
  { 0x00, 0x44, 0x7D, 0x40, 0x00 },  // 105 'i'
  { 0x20, 0x40, 0x44, 0x3D, 0x00 },  // 106 'j'
  { 0x7F, 0x10, 0x28, 0x44, 0x00 },  // 107 'k'
  { 0x00, 0x41, 0x7F, 0x40, 0x00 },  // 108 'l'
  { 0x7C, 0x04, 0x18, 0x04, 0x78 },  // 109 'm'
  { 0x7C, 0x08, 0x04, 0x04, 0x78 },  // 110 'n'
  { 0x38, 0x44, 0x44, 0x44, 0x38 },  // 111 'o'
  { 0x7C, 0x14, 0x14, 0x14, 0x08 },  // 112 'p'
  { 0x08, 0x14, 0x14, 0x18, 0x7C },  // 113 'q'
  { 0x7C, 0x08, 0x04, 0x04, 0x08 },  // 114 'r'
  { 0x48, 0x54, 0x54, 0x54, 0x20 },  // 115 's'
  { 0x04, 0x3F, 0x44, 0x40, 0x20 },  // 116 't'
  { 0x3C, 0x40, 0x40, 0x20, 0x7C },  // 117 'u'
  { 0x1C, 0x20, 0x40, 0x20, 0x1C },  // 118 'v'
  { 0x3C, 0x40, 0x30, 0x40, 0x3C },  // 119 'w'
  { 0x44, 0x28, 0x10, 0x28, 0x44 },  // 120 'x'
  { 0x0C, 0x50, 0x50, 0x50, 0x3C },  // 121 'y'
  { 0x44, 0x64, 0x54, 0x4C, 0x44 },  // 122 'z'
  { 0x00, 0x08, 0x36, 0x41, 0x00 },  // 123 '{'
  { 0x00, 0x00, 0x7F, 0x00, 0x00 },  // 124 '|'
  { 0x00, 0x41, 0x36, 0x08, 0x00 },  // 125 '}'
  { 0x02, 0x01, 0x02, 0x04, 0x02 },  // 126 '~'
  { 0x00, 0x00, 0x00, 0x00, 0x00 }   // 127 (DEL) - vacío
};


// Buffer de pantalla
uint8_t buffer[MATRIX_ROWS][MATRIX_COLS] = { 0 };

// ==============================
// Funciones de control de filas
// ==============================
void prenderFila(uint8_t fila) {
  digitalWrite(filas[fila], HIGH);
}

void apagarFila(uint8_t fila) {
  digitalWrite(filas[fila], LOW);
}

// ==============================
// Dibuja un carácter en el buffer
// ==============================
void dibujarChar(char c, int x, int y) {
  if (c < 32 || c > 126) c = 32;  // espacio si no existe
  const uint8_t *bitmap = font5x7[c - 32];
  for (int col = 0; col < 5; col++) {
    uint8_t colBits = bitmap[col];
    for (int row = 0; row < 7; row++) {
      bool pixel = colBits & (1 << row);
      int dx = x + col;
      int dy = y + row;
      if (dx >= 0 && dx < MATRIX_COLS && dy >= 0 && dy < MATRIX_ROWS) {
        buffer[dy][dx] = pixel;
      }
    }
  }
}

// ==============================
// Desplaza el buffer a la izquierda
// ==============================
void scrollIzquierda() {
  for (int row = 0; row < MATRIX_ROWS; row++) {
    for (int col = 0; col < MATRIX_COLS - 1; col++) {
      buffer[row][col] = buffer[row][col + 1];
    }
    buffer[row][MATRIX_COLS - 1] = 0;
  }
}

// ==============================
// Refresca la matriz (multiplexado)
// ==============================
void refrescarMatriz() {
  for (int fila = 0; fila < MATRIX_ROWS; fila++) {
    apagarFila(fila); // Apagamos fila antes de cambiar columnas
  }

  for (int fila = 0; fila < MATRIX_ROWS; fila++) {
    // Preparamos los datos de las columnas
    sr.setAllLow();
    for (int col = 0; col < MATRIX_COLS; col++) {
      sr.set(col, buffer[fila][col] ? HIGH : LOW);
    }
    prenderFila(fila);
    delayMicroseconds(50); // Mucho más rápido para que sea invisible
    apagarFila(fila);
  }
}


// ==============================
// Configuración
// ==============================
const char mensaje[] = "BIENVENIDOS EXPO HUERGO 2025 ";

void setup() {
  for (int i = 0; i < MATRIX_ROWS; i++) {
    pinMode(filas[i], OUTPUT);
    apagarFila(i);
  }
  sr.setAllLow();

  // Dibuja la primera letra justo al inicio, centrada verticalmente
  dibujarChar(mensaje[0], MATRIX_COLS - 5, 5);
}

// ==============================
// Programa principal
// ==============================
int charIndex = 0;
int colCount = 0;

void loop() {

  // Refresco continuo
  refrescarMatriz();

  static unsigned long lastScroll = 0;
  if (millis() - lastScroll > 100) {  // velocidad scroll
    lastScroll = millis();
    scrollIzquierda();
    colCount++;
    if (colCount >= 6) {  // 5 columnas + 1 espacio
      colCount = 0;
      charIndex++;
      if (charIndex >= strlen(mensaje)) charIndex = 0;
      dibujarChar(mensaje[charIndex], MATRIX_COLS - 5, 5);  // y=5 para centrar vertical
    }
  }
}
